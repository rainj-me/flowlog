/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5/userguide/building_java_projects.html
 */

task download_cassandra(type: Exec) {
    workingDir '.'
    commandLine './download.sh', 'https://dlcdn.apache.org/cassandra/4.0.4/apache-cassandra-4.0.4-bin.tar.gz   ', 'apache-cassandra-4.0.4-bin.tar.gz'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task download_kafka(type: Exec) {
    workingDir '.'
    commandLine './download.sh', 'https://dlcdn.apache.org/kafka/3.2.0/kafka_2.13-3.2.0.tgz', 'kafka_2.13-3.2.0.tgz'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task download_spark(type: Exec) {
    workingDir '.'
    commandLine './download.sh', 'https://dlcdn.apache.org/spark/spark-3.3.0/spark-3.3.0-bin-hadoop3.tgz', 'spark-3.3.0-bin-hadoop3.tgz'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task deflate_cassandra(type: Exec, dependsOn: 'download_cassandra') {
    workingDir '.'
    commandLine './deflate.sh', 'apache-cassandra-4.0.4-bin.tar.gz', 'cassandra'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task deflate_kafka(type: Exec, dependsOn: 'download_kafka') {
    workingDir '.'
    commandLine './deflate.sh', 'kafka_2.13-3.2.0.tgz', 'kafka'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task deflate_spark(type: Exec, dependsOn: 'download_spark') {
    workingDir '.'
    commandLine './deflate.sh', 'spark-3.3.0-bin-hadoop3.tgz', 'spark'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task delete_servers(type: Exec) {
    workingDir '.'
    commandLine 'rm', '-rf', './cassandra', './kafka', './spark'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task start_cassandra(type: Exec, dependsOn: 'deflate_cassandra') {
    workingDir '.'
    commandLine './start_cassandra.sh'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task start_zookeeper(type: Exec, dependsOn: 'deflate_kafka') {
    workingDir './kafka'
    commandLine 'bin/zookeeper-server-start.sh', '-daemon', 'config/zookeeper.properties'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task start_kafka(type: Exec, dependsOn: 'start_zookeeper') {
    workingDir '.'
    commandLine 'kafka/bin/kafka-server-start.sh', '-daemon', 'server.properties'
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task stop_cassandra(type: Exec, dependsOn: 'deflate_cassandra') {
    workingDir '.'
    commandLine './stop_cassandra.sh'
    ignoreExitValue true
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task stop_kafka(type: Exec, dependsOn: 'deflate_kafka') {
    workingDir './kafka'
    commandLine 'bin/kafka-server-stop.sh'
    ignoreExitValue true
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task stop_zookeeper(type: Exec, dependsOn: 'deflate_kafka') {
    workingDir './kafka'
    commandLine 'bin/zookeeper-server-stop.sh'
    ignoreExitValue true
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task init_cassandra(type: Exec, dependsOn: 'start_cassandra') {
    workingDir '.'
    commandLine 'cassandra/bin/cqlsh', '-f', 'init_cassandra.cql'
    ignoreExitValue true
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}

task init_kafka(type: Exec, dependsOn: 'start_kafka') {
    workingDir './kafka'
    commandLine 'bin/kafka-topics.sh', '--create', '--topic', 'flowlog-events', '--bootstrap-server', '127.0.0.1:9092'
    ignoreExitValue true
    standardOutput = new ByteArrayOutputStream()
    doLast {
        println standardOutput.toString()
    }
}
task start_servers(dependsOn: ['start_cassandra', 'start_kafka'])
task init_servers(dependsOn: ['init_cassandra', 'init_kafka', 'deflate_spark'])
task stop_servers(dependsOn: ['stop_cassandra', 'stop_zookeeper', 'stop_kafka'])
task clean_servers(dependsOn: 'delete_servers')
